console.log(2 + "2" == "2" + 2);  // true
/* 
2 + "2" -> 22
"2" + 2 -> 22
22 == 22 
*/

console.log(2 + "3" == "3" + 2);  // false
/* 
2 + "3" -> 23
"3" + 2 -> 32
23 !== 32 
*/

console.log("3" + "2" == 3 + 2); // false
/* 
"3" + "2" -> 32
3 + 2 -> 5
32 !== 5 
*/

console.log("3" + "2" == "3" + 2); // true
/* 
"3" + "2" -> 32
"3" + 2 -> 32
32 == 32 
*/

console.log("3" + "2" == 2 + "3"); // false
/* 
"3" + "2" -> 32
2 + "3" -> 23
32 !== 23 
*/

/* 
Если одним из операндов является строка, то другой операнд 
преобразуется в строку тоже и произойдет конкатенация. 
Это относится ко всем вышеприведенным примерам. 
*/

console.log(2 + Number("3")==  Number("3") + 2); // true
/* 2 + Number("3") -> 5
Number("3") + 2 -> 5
5 == 5 */

/* 
В неконструкторном контексте, объект Number может использоваться 
для проведения преобразования типов(собственно как в данном случае). 
Это пример явного преобразования. Если же вдруг аргумент не может 
быть преобразован в число, возвращается NaN. 
*/


console.log(12 / "6"); // 2
// Унарные операторы пытаются конвертировать строку в число(неявное преобразование)

console.log("number" + 15 + 3); // number153
/* 
Если одним из операндов является строка, то другой операнд 
преобразуется в строку тоже и произойдет конкатенация. 
*/

console.log(15 + 3 + "number"); // 18number
/* 
В данном случае сначала выполняется операция Number + Number -> сложение, 
и только затем Number + String -> конкатенация. 
*/

console.log([1] > null); // true

console.log("foo" + + "bar"); // fooNaN

console.log('true' == true); // false
console.log('false' == false); // false

/* 
Если два операнда не являются одного типа, JavaScript преобразует операнды, 
а затем применяет строгое сравнение. Если один из операндов является числом или 
логическим значением, операнды по возможности преобразуются в числа; 
В ином случае, если один из операндов является строкой, другой операнд 
преобразуется в строку, если это возможно. 
*/

console.log(null == ''); // false
/*
Проверка равенства с null и undefined является особым случаем. 
Они равны друг другу, но не равны чему бы то ни было ещё, 
этот случай прописан особо в спецификации.
*/

console.log(!!"false" == !!"true"); // true
/* 
! конвертирует значение булеан. Но в данном случае мы имеем не
логические значения, а всего лишь строки.
*/

console.log(['x'] == 'x'); // true

////////////////////////////////////////////////////////////////////////////

const enemy = {
    name : "Bob"
}

const friend = {
    name: "Alex"
}

const me = friend;

me.name = "Bob";


console.log(friend.name); // Bob
console.log(me === friend); //true
console.log(me === enemy); //false